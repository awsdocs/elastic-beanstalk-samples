files:
  "/opt/elasticbeanstalk/support/conf/http-redirection.erb":
    owner: root
    group: root
    mode: "000644"
    content: |
      ##############################################################
      #  Phusion Passenger Standalone uses a template file to
      #  generate an Nginx configuration file. The original template
      #  file can be found by running the following command:
      #
      #    ls $(passenger-config about resourcesdir)/templates/standalone/config.erb
      #
      #  You can create a copy of this template file and customize it
      #  to your liking. Just make sure you tell Phusion Passenger Standalone
      #  to use your template file by passing the --nginx-config-template
      #  parameter.
      #
      #  *** NOTE ***
      #  If you customize the template file, make sure you keep an eye
      #  on the original template file and merge any changes.
      #  New Phusion Passenger features may require changes to the template
      #  file.
      ##############################################################
      
      
      master_process on;
      worker_processes 1;
      daemon on;
      error_log '<%= @options[:log_file] %>' <% if debugging? %>info<% end %>;
      pid '<%= @options[:pid_file] %>';
      
      <% if Process.euid == 0 %>
          <% if @options[:user] %>
              <%# Run workers as the given user. The master process will always run as root and will be able to bind to any port. %>
              user <%= @options[:user] %> <%= default_group_for(@options[:user]) %>;
          <% else %>
              <%# Prevent running Nginx workers as nobody. %>
              user <%= current_user %> <%= default_group_for(current_user) %>;
          <% end %>
      <% end %>
      
      events {
          worker_connections 1024;
      }
      
      http {
          log_format debug '[$time_local] $msec  "$request" $status conn=$connection sent=$bytes_sent body_sent=$body_bytes_sent';
          include '<%= PhusionPassenger.resources_dir %>/mime.types';
          passenger_ruby <%= PlatformInfo.ruby_command %>;
          passenger_root '<%= location_config_filename %>';
          passenger_abort_on_startup_error on;
          passenger_ctl cleanup_pidfiles <%= serialize_strset("#{@temp_dir}/temp_dir_toucher.pid") %>;
          passenger_user_switching off;
          passenger_max_pool_size <%= @options[:max_pool_size] %>;
          passenger_min_instances <%= @options[:min_instances] %>;
          <% if @options[:user] %>
              passenger_user <%= @options[:user] %>;
              passenger_default_user <%= @options[:user] %>;
              passenger_analytics_log_user <%= @options[:user] %>;
          <% else %>
              passenger_user <%= current_user %>;
              passenger_default_user <%= current_user %>;
              passenger_analytics_log_user <%= current_user %>;
          <% end %>
          <% if debugging? %>passenger_log_level 2;<% end %>
          <% if @options[:temp_dir] %>passenger_temp_dir '<%= @options[:temp_dir] %>';<% end %>
          <% if @options[:rolling_restarts] %>passenger_rolling_restarts on;<% end %>
          <% if @options[:resist_deployment_errors] %>passenger_resist_deployment_errors on;<% end %>
          <% if !@options[:load_shell_envvars] %>passenger_load_shell_envvars off;<% end %>
      
          <% if !@options[:friendly_error_pages].nil? -%>
              passenger_friendly_error_pages <%= boolean_config_value(@options[:friendly_error_pages]) %>;
          <% end %>
      
          <% if @options[:union_station_gateway_address] %>
              union_station_gateway_address <%= @options[:union_station_gateway_address] %>;
              union_station_gateway_port <%= @options[:union_station_gateway_port] %>;
              union_station_gateway_cert -;
          <% end %>
          
          default_type application/octet-stream;
          types_hash_max_size 2048;
          server_names_hash_bucket_size 64;
          client_max_body_size 1024m;
          access_log off;
          keepalive_timeout 60;
          underscores_in_headers on;
          gzip on;
          gzip_comp_level 3;
          gzip_min_length 150;
          gzip_proxied any;
          gzip_types text/plain text/css text/json text/javascript \
              application/javascript application/x-javascript application/json \
              application/rss+xml application/vnd.ms-fontobject application/x-font-ttf \
              application/xml font/opentype image/svg+xml text/xml;
          
          <% if @apps.size > 1 %>
          # Default server entry.
          server {
              <% if @options[:ssl] %>
                  <% if @options[:ssl_port] %>
                      listen <%= nginx_listen_address %>;
                      listen <%= nginx_listen_address_with_ssl_port %> ssl;
                  <% else %>
                      listen <%= nginx_listen_address %> ssl;
                  <% end %>
              <% else %>
                  listen <%= nginx_listen_address %>;
              <% end %>
              root '<%= PhusionPassenger.resources_dir %>/standalone_default_root';
          }
          <% end %>
      
          <% if @options[:ping_port] %>
          server {
              listen <%= nginx_listen_address(@options, true) %>;
              root '<%= PhusionPassenger.resources_dir %>/standalone_default_root';
          }
          <% end %>
          
          <% for app in @apps %>
          server {
              <% if app[:ssl] %>
                  <% if app[:ssl_port] %>
                      listen <%= nginx_listen_address(app) %>;
                      listen <%= nginx_listen_address_with_ssl_port(app) %> ssl;
                  <% else %>
                      listen <%= nginx_listen_address(app) %> ssl;
                  <% end %>
              <% else %>
                  listen <%= nginx_listen_address(app) %>;
              <% end %>
              server_name <%= app[:server_names].join(' ') %>;
              <% if app[:static_files_dir] %>
                  root '<%= app[:static_files_dir] %>';
              <% else %>
                  root '<%= app[:root] %>/public';
              <% end %>
              passenger_app_root '<%= app[:root] %>';
              passenger_enabled on;
              passenger_app_env <%= app[:environment] %>;
              passenger_spawn_method <%= app[:spawn_method] %>;
              <% if app[:app_type] %>passenger_app_type <%= app[:app_type] %>;<% end %>
              <% if app[:startup_file] %>passenger_startup_file <%= app[:startup_file] %>;<% end %>
              <% if app[:concurrency_model] != DEFAULT_CONCURRENCY_MODEL %>passenger_concurrency_model <%= app[:concurrency_model] %>;<% end %>
              <% if app[:thread_count] != DEFAULT_THREAD_COUNT %>passenger_thread_count <%= app[:thread_count] %>;<% end %>
              <% if app[:min_instances] %>passenger_min_instances <%= app[:min_instances] %>;<% end %>
              <% if app[:restart_dir] %>passenger_restart_dir '<%= app[:restart_dir] %>';<% end %>
              <% if @options[:sticky_sessions] %>passenger_sticky_sessions on;<% end %>
              <% if @options[:sticky_sessions_cookie_name] %>passenger_sticky_sessions_cookie_name '<%= sticky_sessions_cookie_name %>';<% end %>
              <% if app[:union_station_key] %>
                  union_station_support on;
                  union_station_key <%= app[:union_station_key] %>;
              <% end %>
              <% if app[:ssl] %>
                  ssl_certificate <%= app[:ssl_certificate] %>;
                  ssl_certificate_key <%= app[:ssl_certificate_key] %>;
              <% end %>
      
              set $redirect 0;
              location / {
                  if ($http_x_forwarded_proto != "https") {
                    set $redirect 1;
                  }
                  if ($http_user_agent ~* "ELB-HealthChecker") {
                    set $redirect 0;
                  }
                  if ($redirect = 1) {
                    return 301 https://$host$request_uri;
                  }
                  passenger_enabled on;
              }

              # Rails asset pipeline support.
              location ~ "^/assets/.+-[0-9a-f]{32}\..+" {
                  if ($http_x_forwarded_proto != "https") {
                    set $redirect 1;
                  }
                  if ($http_user_agent ~* "ELB-HealthChecker") {
                    set $redirect 0;
                  }
                  if ($redirect = 1) {
                    return 301 https://$host$request_uri;
                  }

                  error_page 490 = @static_asset;
                  error_page 491 = @dynamic_request;
                  recursive_error_pages on;
      
                  if (-f $request_filename) {
                      return 490;
                  }
                  if (!-f $request_filename) {
                      return 491;
                  }
              }
              location @static_asset {
                  gzip_static on;
                  expires max;
                  add_header Cache-Control public;
                  add_header ETag "";
              }
              location @dynamic_request {
                  passenger_enabled on;
              }
          }
          passenger_pre_start http://<%= nginx_listen_address(app) %>;
          <% end %>                                                                                                                                                                                                           }

container_commands:
  99_restart_passenger:
    command: "service passenger restart || service passenger start"
